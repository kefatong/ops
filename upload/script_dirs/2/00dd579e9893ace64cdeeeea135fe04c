__author__ = 'eric'


#!/usr/bin/env python


# author : eric
# date   : 2016/05/06


import os
import re
import time
import pexpect
 

BIN_HOME = '/opt/mqm/bin/'

dspmq = BIN_HOME + 'dspmq'
dspmqver = BIN_HOME + 'dspmqver'
runmqsc =BIN_HOME + 'runmqsc'


class check_mqm:

    def __init__(self,qname):
        self.qname = qname

    def mqm_version(self):
        _dspmqver = os.popen(dspmqver).read()

        for i in _dspmqver.split('\n'):
            print i


    def mqm_status(self,cmd):

        for q in self.qname:
            if q.get('STATUS',None) == 'Running':
                _runmqsc_file = '/tmp/pexpect_mqm_{0}_mqm_status.log'.format(q.get('QMNAME'))
                _runmqsc_logs = file(_runmqsc_file, 'w')
                _runmqsc = pexpect.spawn('{0} {1}'.format(runmqsc, q.get('QMNAME')))
                _runmqsc.logfile_read = _runmqsc_logs
                _runmqsc.timeout = 1
                time.sleep(1)
                _runmqsc.sendline(cmd)
                try: _runmqsc.expect(pexpect.EOF)
                except: pass

                print 'QMNAME :{0}.  Status:{1}.      Run Command: {2}'.format(q.get('QMNAME'), q.get('STATUS'),cmd)
                with open(_runmqsc_file) as f:
                    logdata = f.readlines()[6:]
                    content_list = []

                    contents = []
                    discard = False

                    for c in range(len(logdata)):
                        data = logdata[c]


                        if re.search('details',data):
                            contents.append(data)
                            continue
                            
                        if re.search('QUEUE\(',data):
                            if re.search('SYSTEM',data):
                                discard = True
                                contents.append(data)
                            else:
                                contents.append(data)
                                discard = False
                            continue

                        if re.search('CURDEPTH',data):
                            contents.append(data)
                            

                        if not discard:
                            content_list.append(contents)

                        content = []
                        discard = False

                for i in content_list:
                    for x in i:
                       print x,

                print '\n'


    def dead_queue_status(self):

        for q in self.qname:
            if q.get('STATUS',None) == 'Running':
                _runmqsc_file = '/tmp/pexpect_mqm_{0}_dead_queue_status.log'.format(q.get('QMNAME'))
                _runmqsc_logs = file(_runmqsc_file, 'w')
                _runmqsc = pexpect.spawn('{0} {1}'.format(runmqsc, q.get('QMNAME')))
                _runmqsc.logfile_read = _runmqsc_logs
                _runmqsc.timeout = 1
                time.sleep(1)
                _runmqsc.sendline('dis queue(deadq)')
                try: _runmqsc.expect(pexpect.EOF)
                except: pass

                print 'QMNAME :{0} Dead Queue Status:{1}'.format(q.get('QMNAME'), q.get('STATUS'))
                with open(_runmqsc_file) as f:
                    logdata = f.readlines()[6:]
                    for i in logdata:
                        print i


    def chl_status(self,cmd):

        for q in self.qname:
            if q.get('STATUS',None) == 'Running':
                _runmqsc_file = '/tmp/pexpect_mqm_{0}_mqm_status.log'.format(q.get('QMNAME'))
                _runmqsc_logs = file(_runmqsc_file, 'w')
                _runmqsc = pexpect.spawn('{0} {1}'.format(runmqsc, q.get('QMNAME')))
                _runmqsc.logfile_read = _runmqsc_logs
                _runmqsc.timeout = 1
                time.sleep(1)
                _runmqsc.sendline(cmd)
                try: _runmqsc.expect(pexpect.EOF)
                except: pass

                print 'QMNAME :{0}.  Status:{1}.      Run Command: {2}'.format(q.get('QMNAME'), q.get('STATUS'),cmd)
                with open(_runmqsc_file) as f:
                    logdata = f.readlines()[6:]
                    content_list = []

                    contents = []
                    discard = False

                    for c in range(len(logdata)):
                        #print logdata[c],
                        data = logdata[c]


                        if re.search('details',data):
                            contents.append(data)
                            continue
                            
                        if re.search('CHANNEL\(',data):
                            if re.search('SYSTEM',data):
                                discard = True
                                contents.append(data)
                            else:
                                contents.append(data)
                                discard = False


                        if not discard:
                            content_list.append(content)

                        contents = []
                        discard = False

                for i in contents:
                    for x in i:
                       print x,

                print '\n'



def main():
    QMNAME = []
    _dspmq = os.popen(dspmq).read()

    for i in _dspmq.split('/n'):

        if re.search('QMNAME(\(.*\))\s*STATUS',i):
            name = re.findall('QMNAME\((.*)\)\s*STATUS\((.*)\)',i)[0][0]
            status = re.findall('QMNAME\((.*)\)\s*STATUS\((.*)\)',i)[0][1]

            print name,status
            QMNAME.append({
                'QMNAME' : name,
                'STATUS' : status,
            })


    print '#'* 40
    check = check_mqm(QMNAME)
    print '#'* 40
    check.mqm_version()
    print '#'* 40
    check.mqm_status('dis qs(*)')
    print '#'* 40
    check.mqm_status('dis chs(*)')
    print '#'* 40
    check.chl_status('dis chl(*)')
    print '#'* 40
    check.dead_queue_status()
    print '#'* 40




if __name__ == '__main__':
    main()



